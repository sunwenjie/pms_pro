<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.asgab">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	

	<!-- MyBatis配置 start-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.asgab.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.asgab" />
		<property name="annotationClass" value="com.asgab.repository.mybatis.MyBatisRepository"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
        <qualifier value="booking"></qualifier>
    </bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="2000" />
	<!-- MyBatis配置 end-->
	
	
	<!-- xmo数据源配置 start -->
	<bean id="sqlSessionFactory-xmo" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource-xmo" />
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.asgab.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/XMO/*Mapper.xml" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.asgab" />
		<property name="annotationClass" value="com.asgab.repository.mybatis.MyBatisRepositoryXMO"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory-xmo"/>
	</bean>
	<bean id="transactionManager-xmo" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource-xmo" />
        <qualifier value="xmo"></qualifier>
    </bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager-xmo" proxy-target-class="true" />
	<!-- xmo数据源配置 end -->
	
	
	
	
	

	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	
	
	<bean id="multipartResolver"
		class="com.asgab.core.fileupload.CustomMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />
		<property name="maxUploadSize" value="10485760000" />
		<property name="maxInMemorySize" value="40960" />
	</bean>
	
	
	
	
	<!-- production环境 -->
 	<beans profile="production">
 		<context:property-placeholder ignore-unresolvable="true"
			location="classpath*:/application.properties" />	
		
		<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
		<!-- 
		<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		
			<property name="maxActive" value="${jdbc.pool.maxActive}" />
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<property name="minIdle" value="0" />
			<property name="defaultAutoCommit" value="false" />
		</bean>
		 -->

		<!-- 配置druid数据源 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<!-- 基本属性 URL、User、Password -->
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
			<!-- 配置初始化时建立物理连接的个数、最小连接池数量、最大连接池数量 -->
			<property name="initialSize" value="5" />
			<property name="minIdle" value="5" />
			<property name="maxActive" value="20" />
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />
			<!-- 用来检测连接是否有效的SQL，要求是一个查询语句。 -->
			<property name="validationQuery" value="SELECT 'x'" />
			<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
			<property name="testWhileIdle" value="true" />
			<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
			<property name="testOnBorrow" value="false" />
			<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
			<property name="testOnReturn" value="false" />
			<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
			<!-- 如果用Oracle，则把poolPreparedStatements配置为true，SQL Server和MySql可以配置为false。 -->
			<property name="poolPreparedStatements" value="false" />
			<!-- <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat"></property>
			<!-- 打开removeAbandoned功能 ，自动关闭长时间不使用的连接 -->
			<property name="removeAbandoned" value="true" /> 
			<!-- 1800秒 -->
			<property name="removeAbandonedTimeout" value="1800" /> 
			 <!-- 关闭Abanded连接时输出错误日志 -->
			<property name="logAbandoned" value="true" /> 
		</bean>
		
		<bean id="dataSource-xmo" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<!-- 基本属性 URL、User、Password -->
			<property name="url" value="${jdbc.url.xmo}"/>
			<property name="username" value="${jdbc.username.xmo}"/>
			<property name="password" value="${jdbc.password.xmo}"/>
	
			<!-- 配置初始化时建立物理连接的个数、最小连接池数量、最大连接池数量 -->
			<property name="initialSize" value="5" />
			<property name="minIdle" value="5" />
			<property name="maxActive" value="20" />
	
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />
	
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
	
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />
	
			<!-- 用来检测连接是否有效的SQL，要求是一个查询语句。 -->
			<property name="validationQuery" value="SELECT 'x'" />
			<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
			<property name="testWhileIdle" value="true" />
			<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
			<property name="testOnBorrow" value="false" />
			<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
			<property name="testOnReturn" value="false" />
	
			<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
			<!-- 如果用Oracle，则把poolPreparedStatements配置为true，SQL Server和MySql可以配置为false。 -->
			<property name="poolPreparedStatements" value="false" />
			<!-- <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat"></property>
			<!-- 打开removeAbandoned功能 ，自动关闭长时间不使用的连接 -->
			<property name="removeAbandoned" value="true" /> 
			<!-- 1800秒 -->
			<property name="removeAbandonedTimeout" value="1800" /> 
			 <!-- 关闭Abanded连接时输出错误日志 -->
			<property name="logAbandoned" value="true" /> 
		</bean>
		
	</beans>
	
</beans>